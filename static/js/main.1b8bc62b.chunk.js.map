{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","image","calories","ingredients","className","Card","style","width","backgroundColor","border","paddingBottom","Img","variant","src","Body","Title","Subtitle","id","Text","listStyleType","map","ingredient","text","App","useState","recipes","setrecipes","search","setsearch","query","setquery","useEffect","getrecipes","a","fetch","response","json","data","hits","console","log","margin","onSubmit","e","preventDefault","Form","Group","controlId","display","Control","type","flex","marginRight","placeholder","value","onChange","target","Button","recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wRAGe,SAASA,EAAT,GAAqD,IAApCC,EAAmC,EAAnCA,MAAeC,GAAoB,EAA7BC,SAA6B,EAApBD,OAAME,EAAc,EAAdA,YAGjD,OACI,yBAAKC,UAAU,QACjB,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAASC,gBAAgB,UAAUC,OAAO,QAAQC,cAAc,SAC1F,kBAACL,EAAA,EAAKM,IAAN,CAAUC,QAAQ,MAAMC,IAAKZ,IAC7B,kBAACI,EAAA,EAAKS,KAAN,KACM,kBAACT,EAAA,EAAKU,MAAN,KAAaf,GACb,kBAACK,EAAA,EAAKW,SAAN,CAAeZ,UAAU,mBAAkB,uBAAGa,GAAG,UACrD,kBAACZ,EAAA,EAAKa,KAAN,SAAY,2CAAZ,OAAmC,wBAAIZ,MAAO,CAACa,cAAc,SACxDhB,EAAYiB,KAAI,SAAAC,GAAU,OAC3B,4BAAKA,EAAWC,c,oBCqDTC,G,YA7DJ,WACT,IADa,EAIcC,mBAAS,IAJvB,mBAINC,EAJM,KAIEC,EAJF,OAKYF,mBAAS,IALrB,mBAKNG,EALM,KAKCC,EALD,OAMUJ,mBAAS,WANnB,mBAMNK,EANM,KAMAC,EANA,KAObC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAC,8BAAAC,EAAA,sEACQC,MAAM,mCAAD,OAAoCL,EAApC,mBAXjB,WAWiB,oBAVhB,qCASG,cACTM,EADS,gBAEIA,EAASC,OAFb,OAETC,EAFS,OAGfX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,GAJG,2CAAD,qDAmBhB,OACE,yBAAKjC,UAAU,OACf,yBAAKA,UAAU,YAAYE,MAAO,CAACmC,OAAO,SAEzC,wBAAInC,MAAO,CAACmC,OAAO,SAAnB,mCACA,yBAAKrC,UAAU,OAAOE,MAAO,CAACmC,OAAO,SACtC,0BAAMC,SAbQ,SAACC,GACfA,EAAEC,iBACFd,EAASH,GACTC,EAAU,MAYN,kBAACiB,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAAiBzC,MAAO,CAAC0C,QAAS,OAAOzC,MAAM,MAAMkC,OAAO,SAEtF,kBAACI,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAO5C,MAAO,CAAC6C,KAAK,IAAIC,YAAY,OAASC,YAAY,kBAAkBC,MAAO3B,EAAQ4B,SAtB5F,SAACZ,GAClBf,EAAUe,EAAEa,OAAOF,OACnBf,QAAQC,IAAIb,MAqBb,kBAAC8B,EAAA,EAAD,CAAQ7C,QAAQ,UAAUN,MAAO,CAAC6C,KAAK,KAAMD,KAAK,UAAlD,cASH,yBAAK9C,UAAU,WACdqB,EAAQL,KAAI,SAAAsC,GAAM,OACT,kBAAC3D,EAAD,CAAQ4D,IAAKD,EAAOA,OAAOE,MAAO5D,MAAO0D,EAAOA,OAAOE,MAAOzD,YAAauD,EAAOA,OAAOvD,YAAaD,SAAUwD,EAAOA,OAAOxD,SAAUD,MAAOyD,EAAOA,OAAOzD,eC/CnJ4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.1b8bc62b.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card , Button , Image} from 'react-bootstrap'\r\n\r\nexport default function Recipe({title,calories,image,ingredients}) {\r\n\r\n    \r\n    return (\r\n        <div className=\"card\" >\r\n      <Card style={{ width: '15rem' ,backgroundColor:\"#363B3E\",border:\"black\",paddingBottom:\"10px\"}}>\r\n  <Card.Img variant=\"top\" src={image} />\r\n  <Card.Body>\r\n        <Card.Title>{title}</Card.Title>\r\n        <Card.Subtitle className=\"mb-2 text-muted\"><p id=\"demo\"></p></Card.Subtitle>\r\n    <Card.Text> <b> Ingredients</b>    <ul style={{listStyleType:\"none\"}} >\r\n        {ingredients.map(ingredient=>(\r\n        <li>{ingredient.text}</li>\r\n    ))}</ul>\r\n    </Card.Text>\r\n  </Card.Body>\r\n</Card>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n","import React,{useEffect, useState} from 'react';\nimport Recipe from './Recipe'\nimport {Form,Button} from 'react-bootstrap';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App =()=>{\n  const APP_ID='98c8f2c3';\n  const APP_KEY='9b7aaa12383baaa6233a79cfce41529b';\n \n  const [recipes,setrecipes]=useState([]);\n  const [search,setsearch]=useState('');\n  const [query,setquery]=useState('chicken');\n  useEffect(() => {\n    getrecipes();\n  }, [query]);\n\n  const getrecipes=async()=>{\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setrecipes(data.hits);\n    console.log(data);\n  };\n\n  const updataSearch=(e)=>{\n    setsearch(e.target.value);\n    console.log(search);\n  }\n\n  const getSearch=(e)=>{\n    e.preventDefault();\n    setquery(search);\n    setsearch('');\n  }\n\n\n  return(\n    <div className='App' > \n    <div className=\"contianer\" style={{margin:'auto'}}>\n    \n     <h1 style={{margin:'auto'}}>React Recipe Ingredients Finder</h1>\n     <div className=\"form\" style={{margin:'40px'}}>\n    <form onSubmit={getSearch} >\n       \n        <Form.Group controlId=\"formBasicEmail\" style={{display: 'flex',width:'75%',margin:'auto'}}>\n    \n    <Form.Control type=\"text\" style={{flex:'8',marginRight:'5px'}}  placeholder=\"Enter Food Name\" value={search} onChange={updataSearch} />\n   <Button variant=\"primary\" style={{flex:'2'}} type=\"submit\">\n    Submit\n  </Button>\n  \n  </Form.Group>\n </form>\n    </div> \n    </div>\n      \n<div className='recipes' >\n{recipes.map(recipe=>(\n          <Recipe key={recipe.recipe.label} title={recipe.recipe.label} ingredients={recipe.recipe.ingredients} calories={recipe.recipe.calories} image={recipe.recipe.image}\n          />\n        ))}\n</div>\n        \n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}